XYCE_VERIFY.PL(1)                                            XYCE_VERIFY.PL(1)



SSYYNNOOPPSSIISS
       xxyyccee__vveerriiffyy..ppll  [ _-_-_v_e_r_b_o_s_e ] [ _-_-_d_e_b_u_g ] [ _-_-_g_o_o_d_r_e_s_=_g_o_o_d _._s_t_e_p _r_e_s_u_l_t
       _f_i_l_e ] [ _-_-_t_e_s_t_r_e_s_=_t_e_s_t _._s_t_e_p _r_e_s_u_l_t _f_i_l_e ] [ _-_-_h_e_l_p ] _n_e_t_l_i_s_t _g_o_o_d_f_i_l_e
       _t_e_s_t_f_i_l_e [ _p_l_o_t_f_i_l_e ]


NNAAMMEE
       xyce_verify.pl

AAUUTTHHOORRSS
       Tom  Russo,  SNL, Electrical Systems Modeling Todd Coffey, SNL, Simula-
       tion Modeling Sciences

DDEESSCCRRIIPPTTIIOONN
       xxyyccee__vveerriiffyy..ppll is a PERL script to compare files of SPICE-like  simula-
       tion  output  producing  RMS errors and RMS relative errors on standard
       out, optionally producing a file on _p_l_o_t_f_i_l_e for plotting.

       A netlist corresponding to the output must be given, as the output will
       be checked in various ways to see that it conforms to the netlist spec-
       ification.

       "good" and "test" input files consist of lines of the form  typical  of
       _X_y_c_e_(_T_M_) .prn  files, or output created in _C_h_i_l_e_S_P_I_C_E using the

              print v(1) v(2) v(3) [...] > goodfile

       command  in  the  interactive interpreter.  Lines consist of an integer
       index, followed by a time and any number of  output  variables.   Input
       may  be space, tab or comma delimited.  If given data files from either
       _X_y_c_e_(_T_M_) or _C_h_i_l_e_S_P_I_C_E, xyce_verify.pl will also check that the  column
       names  in the both data files agree with the output variables specified
       on the ".print" line of the netlist.  Note that in the  case  of  SPICE
       output,  long  .print lines will be paginated by the simulator in a way
       that xyce_verify.pl cannot parse --- it expects all  the  output  vari-
       ables for a given time or DC sweep step to be on one line.

       It  is  also legal to give xyce_verify.pl an unadorned datafile with no
       header or footer (perhaps generated by a non-spice code), but this dis-
       ables  the  check  that xyce_verify.pl does on the titles of the output
       columns.

       The first file listed on the command line  will  be  taken  to  be  the
       netlist  from which the "test" file is generated.  This netlist will be
       partially parsed and both the  analysis  (.DC  or  .TRAN,)  and  output
       (.PRINT) lines are used to determine what sort of error analysis to do.

       The second argument is taken as a file of "gold standard" data, and the
       third file will be taken to be a file to test against it.


WWhhaatt iitt ddooeess
       xyce_verify.pl  does  some  basic  sanity  checking  on the files it is
       given, then peforms a detailed RMS error analysis of the data,  compar-
       ing  the "test" file to the "good" file.  It exits with exit code 0 and
       no output if the two files match to within tolerances, and with a  non-
       zero exit code and some output otherwise.

       For  DC sweep netlists, xyce_verify.pl checks that both data files con-
       tain output for every step of the DC sweep requested  by  the  netlist.
       This  check  makes some very restrictive assumptions about the netlist,
       and limits the applicability of the current version  of  xyce_verify.pl
       to  DC sweep netlists that conform to those assumptions.  See the _L_i_m_i_-
       _t_a_t_i_o_n_s section, below.

       DC sweeps of one or two sources are  supported.   If  two  sources  are
       swept,  xyce_verify.pl does a comparison of output by treating the out-
       put as a family of curves with the fast-varying source as the  indepen-
       dent  coordinate  for  each  curve  and  the slowly-varying source as a
       parameter identifying the curve.

       For transient simulations, xyce_verify.pl  checks  that  the  simulator
       printed  out  an  appropriate  "end of simulation" footer in the output
       file.  The only "end of simulation" footers  it  recognizes  are  those
       from _X_y_c_e_(_T_M_) and _C_h_i_l_e_S_P_I_C_E.

       Since  runs  of different codes might produce output at different times
       but still be performing  acceptably,  xyce_verify.pl  interpolates  the
       "good"  data  to  the  times  in the test data file to produce a "good"
       series that is evaluated at  precisely  the  same  times  as  the  test
       series.  At this time only linear interpolation is available.

       An   RMS   error   norm  is  computed  by  integrating  the  square  of
       (good(t)-test(t))/(reltol*good(t)+abstol), dividing by the time  inter-
       val  (or  voltage sweep range), and taking the square root.  _r_e_l_t_o_l and
       _a_b_s_t_o_l are described below.

       If a plot file name is specified, the file will contain lines  of  data
       useful  for plotting the good and test data against each other, and the
       error measures.  Each line of plot output contains, in order, the  time
       (if  a  transient  sweep),  and  then the test value, interpolated good
       value, difference, and relative error  for  each  output  variable,  in
       columnar format delimited with spaces.


SSppeecciiffiiccaattiioonn ooff ttoolleerraanncceess
       _x_y_c_e___v_e_r_i_f_y_._p_l  uses  several  different  tolerances  in its operation.
       Each may be specified independently for every  signal  present  in  the
       netlist.   The  tolerances,  their  use,  their specification and their
       defaults are described in this section.

       _I_M_P_O_R_T_A_N_T: The tolerances used by xyce_verify.pl are for  error  norms,
       and are often very different in use from the similarly-named tolerances
       in the simulators themselves.  It  is  often  completely  incorrect  to
       attempt  to  specify tolerances in xyce_verify.pl that are identical to
       the similarly-named quantities for the simulator.

       _S_p_e_c_i_f_i_c_a_t_i_o_n _o_f _t_o_l_e_r_a_n_c_e_s_:  Tolerances  for  individual  signals  are
       specified using netlist comments.  If a line in the netlist starts with
       the five characters "*COMP", the remainder of the line is parsed  as  a
       "comparator tolerance specification."  The format of *COMP lines is:

       **ccoommpp   _<_o_u_t_p_u_t   _c_o_l_u_m_n   _n_a_m_e_>  [  _r_e_l_t_o_l_=_<_r_e_l_a_t_i_v_e  _t_o_l_e_r_a_n_c_e_>  ]  [
       _a_b_s_t_o_l_=_<_a_b_s_o_l_u_t_e _t_o_l_e_r_a_n_c_e_> ] [  _z_e_r_o_t_o_l_=_<_z_e_r_o  _t_o_l_e_r_a_n_c_e_>  ]  [  _a_b_s_d_-
       _i_f_f_t_o_l_=_<_a_b_s_o_l_u_t_e _d_i_f_f_e_r_e_n_c_e _t_o_l_e_r_a_n_c_e_> ]

       This  format  was  chosen because its specification inside a netlist is
       interpreted as a comment by the simulators.  This allows the netlist to
       be the full specification of the test without requiring a separate con-
       figuration file for tolerances of each test.

       For example:

               *comp v(1) reltol=0.02 abstol=1e-6
               .print tran v(1) v(2) v(3)

       will set abstol to 1e-6 and reltol to 2% for signal v(1),  leaving  the
       tolerances  for  all other signals at their defaults.  When run through
       _X_y_c_e_(_t_m_) the *COMP line will be ignored.

       If an expression is used on the print line to output a function of out-
       put signals, the precise expression used on the print line must also be
       used on the "*COMP" line.  For example:

               *comp {1.0+v(1)} reltol=0.02 abstol=1e-6
               .print tran {1.0+v(1)} v(2) v(3)

       It is a common error to forget this requirement and to use only  "v(1)"
       on  the  "*COMP"  line.  "*COMP" lines apply only to signals that match
       exactly the expression given, and  those  including  print  expressions
       that are not output on the ".print" line are ignored.

       _r_e_l_t_o_l  is  the relative tolerance used to compute the RMS error.  In a
       rough sense it is the precision to which the overall  signal  is  held,
       and  reltol should be set to the threshold for failure of the test.  It
       defaults to 1 percent, or 0.01.

       _a_b_s_t_o_l is used to reduce the significance of errors in quantities  that
       are  already  small.   Its use in the denominator of the relative error
       term prevents the denominator from becoming too small and inflating the
       error norm.  The default value of abstol is 1e-12.

       _z_e_r_o_t_o_l  is  the absolute value below which a number should be replaced
       with 0.0.

       _a_b_s_d_i_f_f_t_o_l: if two numbers differ by an absolute value of absdifftol or
       less they are considered to have zero error.  The default value of abs-
       difftol is 1e-12.


UUssee wwiitthh ..SSTTEEPP nneettlliissttss
       On 7 Oct 2004 a limited support  for  netlists  with  ".STEP"  analysis
       statements  was  added.   Please read carefully if you're trying to use
       xyce_verify.pl to compare runs that use .STEP.

       The .STEP capability assumes that one has both gold standard  and  test
       cases that have been generated with Xyce.  No provision is available to
       compare Xyce output with some other simulator.

       xyce_verify.pl will work with up to two .STEP statements in a  netlist.

       When  run  on a .STEP netlist and its output, xyce_verify.pl will split
       both the good and test input files into separate files, relying on  the
       fact  that  Xyce  will  start  the "Index" column over at zero for each
       step.  These files are given a name that includes the base name of  the
       input  file,  the  current  process ID number, and the string "_split."
       followed by the step number.  It is tacitly assumed that  this  set  of
       file  names  will  be unique in the current directory and no attempt is
       made to check that the file already exists.

       The comparator then checks the  ".res"  file  that  contains  the  step
       parameters.   It  requires  such  a file for both the gold standard and
       test files.  By default it will  use  the  name  of  the  netlist  with
       ".res.gs"  appended  for the gold standard ".res" file, and the name of
       the netlist with ".res" appended for the test file.  If these  are  not
       the  correct names to be used, specify alternates with "--goodres=" and
       "--testres."

       Once xyce_verify.pl has checked that both  the  good  and  test  result
       files  contain  a  line  for  every step in the sweeps specified in the
       netlist, it simply loops over the list of split good and test files and
       compares  them  as if they were normal Xyce output.  All behavior after
       processing the .res  file  is  identical  to  processing  for  non-step
       netlists.   That  means that the netlist is subject to the same limita-
       tions that would pertain  if  ".STEP"  were  not  used,  including  the
       requirements of the .PRINT line, described below.

       If  a  plotfile is specified on the command line, one such file will be
       produced for each step, using the specified plotfile  name  as  a  base
       name and appending the step number.


LLIIMMIITTAATTIIOONNSS ((rreeaadd ccaarreeffuullllyy!!))
       _x_y_c_e___v_e_r_i_f_y_._p_l  was written to do quite a lot of detailed sanity check-
       ing of output, but it does have some rather severe  limitations.   _R_e_a_d
       _t_h_i_s  _s_e_c_t_i_o_n _c_a_r_e_f_u_l_l_y _b_e_f_o_r_e _u_s_i_n_g _x_y_c_e___v_e_r_i_f_y_._p_l _t_o _c_h_e_c_k _s_i_m_u_l_a_t_i_o_n
       _r_e_s_u_l_t_s_.

       _x_y_c_e___v_e_r_i_f_y_._p_l assumes that one is using standard  format  output  from
       Xyce and relies on that format for its sanity checking.  It cannot work
       on PROBE or "NOINDEX" format output files.

       For transient simulations xyce_verify.pl interpolates the good  dataset
       to  the  times in the test dataset.  This interpolation is only as good
       as the good dataset: if the good dataset is not very smooth, is  evalu-
       ated on an inappropriately coarse time mesh, or just isn't very "good,"
       then meaningless comparisons can result.

       Since xyce_verify.pl does an interpolation of the good data to the test
       data's  times,  _I_T  _C_A_N_N_O_T  _B_E _U_S_E_D _T_O _C_H_E_C_K _T_H_A_T _X_Y_C_E _I_S _O_U_T_P_U_T_T_I_N_G _A_T
       _S_P_E_C_I_F_I_C _T_I_M_E_S_!.  If your test is that Xyce is outputting  at  specific
       intervals  you MUST NOT use xyce_verify.pl to check, because as long as
       the output signals are the correct shape  and  interpolation  is  clean
       then xyce_verify.pl will declare victory.

       For  DC sweeps the limitations are far more severe.  In order to do its
       sanity checking of output, xyce_verify.pl has to make some  assumptions
       about how netlist commands produce output.

       _1_.  If  the  negative  node  of  a  DC source is node 0 (ground), it is
       expected that the user will print the voltage of the postive node.   If
       the  positive  node  is  ground, the user must print the voltage at the
       negative node.  If neither positive node nor negative node  is  ground,
       the  user  must  print  the  voltage  drop  across the source using the
       V(pos,neg) syntax.  If the output does not conform to this expection  a
       failure will be reported.

       _2_.  xyce_verify.pl  checks  to  see  that all steps of the requested DC
       sweeps are present in the output.  In order to do its check,  xyce_ver-
       ify.pl  expects  that  the  sweep  variables are the first items in the
       .PRINT line.  In the case of two-variable sweeps the  first  column  of
       output  should  be  the  faster varying sweep and the second column the
       slower.  xyce_verify.pl checks the .DC line, the .print line,  and  the
       output  files' headers to make sure this is true, and will exit without
       doing any comparison if it is not.  See also the restriction above.

       _3_. The comparator assumes that only one line of output will  appear  in
       the  data  files  for  every  DC sweep step.  Recent changes in Xyce do
       allow some special cases (PDE devices for example) where more than  one
       line  of output is produced for a single sweep step.  These will result
       in xyce_verify.pl reporting failure due to what it considers an  incon-
       sistency  between  what  was requested in the netlist and what was pro-
       duced in the output.


EExxiitt ccooddeess
       Each error condition detected by xyce_verify.pl is signaled by use of a
       non-zero  exit code.  This allows use of xyce_verify.pl inside scripts.

              1:  Data file not terminated with valid "end of run" string.

              3:  could not find interpolation program

              4:  interpolation program failed to run

              20: Failed compare (exceeded tolerances on one or more signal)

              30: Failed compare, missing data in test file.

              66: unused

              79: Assert failure, interpolator didn't produce  correct  number
              of interpolated points

              85:  Sweep values in good data file don't agree with those asked
              for in .DC line of netlist

              86: DC sweep data file has step count inconsistent with .DC line
              in netlist

              87: DC test file contains more steps than "good" file does

              88: *COMP line contains unrecognized tolerance

              89: DC test file missing steps

              90: Failure to determine analysis type (DC or transient)

              92: *COMP line found for variable not in the .PRINT line

              93:  Columns in datafile don't agree with those output by .PRINT
              line in netlist

              94: .PRINT line type (TRAN or DC) in netlist doesn't agree  with
              .DC or .TRAN analysis line

              95:  .PRINT  line for a DC sweep does not contain the voltage of
              positive node of the swept source

              97: End of file encountered before reading any data

              98: End of file encountered while parsing SPICE header

              99: End of file encountered before reading any non-blank lines



BBUUGGSS
       Numerous, I'm sure.  The relative error may  be  meaningless  when  the
       thing  in which there is error is very small --- and no real attempt is
       made to account for that.


DDIISSCCLLAAIIMMEERR
       This code was written to help us look more critically  at  the  differ-
       ences between SPICE and Xyce output.  It is not ready to be relied upon
       for V&V purposes, but is currently being used  for  Xyce  certification
       testing.   Keep  out  of  reach of children.  May cause drowsiness, use
       caution while driving.  Discontinue use if rash develops.


RROOUUTTIINNEESS CCAALLLLEEDD
       None.  Perl must  be  installed  in  the  users's  path  in  order  for
       xyce_verify.pl to work.



                                                             XYCE_VERIFY.PL(1)
