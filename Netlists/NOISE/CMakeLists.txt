# This file is generated by the script SetUpCtestFiles.py
# If possible, modify the script to fix any issues with the CMakeLists.txt files
# Or you can remove this header line to prevent this file from being overwritten

file(COPY  cascodeBjtNOISE.cir cascodeBjtNOISE.cir.tags commonEmitterBjt.cir commonEmitterBjt.cir.tags commonEmitterBjt_ngspice.cir exclude gain-stage1.cir gain-stage1.cir.tags gain-stage2.cir gain-stage2.cir.tags gain-stage3.cir gain-stage3.cir.tags gain-stage_b3.cir gain-stage_b3.cir.tags noiseBjt1.cir noiseBjt1.cir.tags noiseBjt2.cir noiseBjt2.cir.tags res_noise.cir res_noise.cir.tags res_noise_ngspice.cir cascodeBjtNOISE.cir.sh commonEmitterBjt.cir.sh gain-stage1.cir.sh gain-stage2.cir.sh gain-stage3.cir.sh gain-stage_b3.cir.sh res_noise.cir.sh invalid_device.cir invalid_device.cir.sh invalid_device.cir.tags invalid_device.cir.options unsupported_device_source.cir unsupported_device_source.cir.sh unsupported_device_source.cir.tags unsupported_device_source.cir.options unsupported_analysis_mode.cir unsupported_analysis_mode.cir.sh unsupported_analysis_mode.cir.tags unsupported_analysis_mode.cir.options DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/cascodeBjtNOISE.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/commonEmitterBjt.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/gain-stage1.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/gain-stage2.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/gain-stage3.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/gain-stage_b3.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/res_noise.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/invalid_device.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/unsupported_device_source.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/unsupported_analysis_mode.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}NOISE/cascodeBjtNOISE.cir.sh COMMAND perl -I${XyceRegressionTestScripts} cascodeBjtNOISE.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} cascodeBjtNOISE.cir ${OutputDataDir}/NOISE/cascodeBjtNOISE.cir.prn )
  set_property(TEST ${TestNamePrefix}NOISE/cascodeBjtNOISE.cir.sh PROPERTY LABELS "serial;nightly;noise;parallel")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}NOISE/cascodeBjtNOISE.cir.sh COMMAND perl -I${XyceRegressionTestScripts} cascodeBjtNOISE.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} cascodeBjtNOISE.cir ${OutputDataDir}/NOISE/cascodeBjtNOISE.cir.prn )
  set_property(TEST ${TestNamePrefix}NOISE/cascodeBjtNOISE.cir.sh PROPERTY LABELS "serial;nightly;noise;parallel")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}NOISE/commonEmitterBjt.cir.sh COMMAND perl -I${XyceRegressionTestScripts} commonEmitterBjt.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} commonEmitterBjt.cir ${OutputDataDir}/NOISE/commonEmitterBjt.cir.prn )
  set_property(TEST ${TestNamePrefix}NOISE/commonEmitterBjt.cir.sh PROPERTY LABELS "serial;nightly;noise;parallel;bjtlev1")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}NOISE/commonEmitterBjt.cir.sh COMMAND perl -I${XyceRegressionTestScripts} commonEmitterBjt.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} commonEmitterBjt.cir ${OutputDataDir}/NOISE/commonEmitterBjt.cir.prn )
  set_property(TEST ${TestNamePrefix}NOISE/commonEmitterBjt.cir.sh PROPERTY LABELS "serial;nightly;noise;parallel;bjtlev1")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}NOISE/gain-stage1.cir.sh COMMAND perl -I${XyceRegressionTestScripts} gain-stage1.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} gain-stage1.cir ${OutputDataDir}/NOISE/gain-stage1.cir.prn )
  set_property(TEST ${TestNamePrefix}NOISE/gain-stage1.cir.sh PROPERTY LABELS "serial;nightly;noise;parallel")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}NOISE/gain-stage1.cir.sh COMMAND perl -I${XyceRegressionTestScripts} gain-stage1.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} gain-stage1.cir ${OutputDataDir}/NOISE/gain-stage1.cir.prn )
  set_property(TEST ${TestNamePrefix}NOISE/gain-stage1.cir.sh PROPERTY LABELS "serial;nightly;noise;parallel")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}NOISE/gain-stage2.cir.sh COMMAND perl -I${XyceRegressionTestScripts} gain-stage2.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} gain-stage2.cir ${OutputDataDir}/NOISE/gain-stage2.cir.prn )
  set_property(TEST ${TestNamePrefix}NOISE/gain-stage2.cir.sh PROPERTY LABELS "serial;nightly;noise;parallel")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}NOISE/gain-stage2.cir.sh COMMAND perl -I${XyceRegressionTestScripts} gain-stage2.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} gain-stage2.cir ${OutputDataDir}/NOISE/gain-stage2.cir.prn )
  set_property(TEST ${TestNamePrefix}NOISE/gain-stage2.cir.sh PROPERTY LABELS "serial;nightly;noise;parallel")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}NOISE/gain-stage3.cir.sh COMMAND perl -I${XyceRegressionTestScripts} gain-stage3.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} gain-stage3.cir ${OutputDataDir}/NOISE/gain-stage3.cir.prn )
  set_property(TEST ${TestNamePrefix}NOISE/gain-stage3.cir.sh PROPERTY LABELS "serial;nightly;noise;parallel")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}NOISE/gain-stage3.cir.sh COMMAND perl -I${XyceRegressionTestScripts} gain-stage3.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} gain-stage3.cir ${OutputDataDir}/NOISE/gain-stage3.cir.prn )
  set_property(TEST ${TestNamePrefix}NOISE/gain-stage3.cir.sh PROPERTY LABELS "serial;nightly;noise;parallel")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}NOISE/gain-stage_b3.cir.sh COMMAND perl -I${XyceRegressionTestScripts} gain-stage_b3.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} gain-stage_b3.cir ${OutputDataDir}/NOISE/gain-stage_b3.cir.prn )
  set_property(TEST ${TestNamePrefix}NOISE/gain-stage_b3.cir.sh PROPERTY LABELS "serial;nightly;noise;parallel;bsim3")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}NOISE/gain-stage_b3.cir.sh COMMAND perl -I${XyceRegressionTestScripts} gain-stage_b3.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} gain-stage_b3.cir ${OutputDataDir}/NOISE/gain-stage_b3.cir.prn )
  set_property(TEST ${TestNamePrefix}NOISE/gain-stage_b3.cir.sh PROPERTY LABELS "serial;nightly;noise;parallel;bsim3")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}NOISE/invalid_device.cir.sh COMMAND perl -I${XyceRegressionTestScripts} invalid_device.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} invalid_device.cir ${OutputDataDir}/NOISE/invalid_device.cir.prn )
  set_property(TEST ${TestNamePrefix}NOISE/invalid_device.cir.sh PROPERTY LABELS "serial;nightly;parallel;noise;errorexit")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}NOISE/invalid_device.cir.sh COMMAND perl -I${XyceRegressionTestScripts} invalid_device.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} invalid_device.cir ${OutputDataDir}/NOISE/invalid_device.cir.prn )
  set_property(TEST ${TestNamePrefix}NOISE/invalid_device.cir.sh PROPERTY LABELS "serial;nightly;parallel;noise;errorexit")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}NOISE/res_noise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} res_noise.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} res_noise.cir ${OutputDataDir}/NOISE/res_noise.cir.prn )
  set_property(TEST ${TestNamePrefix}NOISE/res_noise.cir.sh PROPERTY LABELS "serial;nightly;noise;parallel")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}NOISE/res_noise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} res_noise.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} res_noise.cir ${OutputDataDir}/NOISE/res_noise.cir.prn )
  set_property(TEST ${TestNamePrefix}NOISE/res_noise.cir.sh PROPERTY LABELS "serial;nightly;noise;parallel")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}NOISE/unsupported_analysis_mode.cir.sh COMMAND perl -I${XyceRegressionTestScripts} unsupported_analysis_mode.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} unsupported_analysis_mode.cir ${OutputDataDir}/NOISE/unsupported_analysis_mode.cir.prn )
  set_property(TEST ${TestNamePrefix}NOISE/unsupported_analysis_mode.cir.sh PROPERTY LABELS "serial;nightly;parallel;noise;errorexit")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}NOISE/unsupported_analysis_mode.cir.sh COMMAND perl -I${XyceRegressionTestScripts} unsupported_analysis_mode.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} unsupported_analysis_mode.cir ${OutputDataDir}/NOISE/unsupported_analysis_mode.cir.prn )
  set_property(TEST ${TestNamePrefix}NOISE/unsupported_analysis_mode.cir.sh PROPERTY LABELS "serial;nightly;parallel;noise;errorexit")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}NOISE/unsupported_device_source.cir.sh COMMAND perl -I${XyceRegressionTestScripts} unsupported_device_source.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} unsupported_device_source.cir ${OutputDataDir}/NOISE/unsupported_device_source.cir.prn )
  set_property(TEST ${TestNamePrefix}NOISE/unsupported_device_source.cir.sh PROPERTY LABELS "serial;nightly;parallel;noise;errorexit")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}NOISE/unsupported_device_source.cir.sh COMMAND perl -I${XyceRegressionTestScripts} unsupported_device_source.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} unsupported_device_source.cir ${OutputDataDir}/NOISE/unsupported_device_source.cir.prn )
  set_property(TEST ${TestNamePrefix}NOISE/unsupported_device_source.cir.sh PROPERTY LABELS "serial;nightly;parallel;noise;errorexit")
endif()
