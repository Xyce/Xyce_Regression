# This file is generated by the script SetUpCtestFiles.py
# If possible, modify the script to fix any issues with the CMakeLists.txt files
# Or you can remove this header line to prevent this file from being overwritten

add_subdirectory(BSIM4_noise)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/capacitor.cir ${CMAKE_CURRENT_BINARY_DIR}/capacitor.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/capacitor.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/capacitor.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/capacitor.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/semic_capacitor.cir ${CMAKE_CURRENT_BINARY_DIR}/semic_capacitor.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/semic_capacitor.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/semic_capacitor.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/semic_capacitor.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/soln_dep_capacitor.cir ${CMAKE_CURRENT_BINARY_DIR}/soln_dep_capacitor.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/soln_dep_capacitor.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/soln_dep_capacitor.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/soln_dep_capacitor.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/capacitor_ic.cir ${CMAKE_CURRENT_BINARY_DIR}/capacitor_ic.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/inductor.cir ${CMAKE_CURRENT_BINARY_DIR}/inductor.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/inductor.cir.res.gs ${CMAKE_CURRENT_BINARY_DIR}/inductor.cir.res.gs ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/inductor_ic.cir ${CMAKE_CURRENT_BINARY_DIR}/inductor_ic.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/resistor.cir ${CMAKE_CURRENT_BINARY_DIR}/resistor.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/resistor.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/resistor.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/resistor.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/semic_resistor.cir ${CMAKE_CURRENT_BINARY_DIR}/semic_resistor.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/semic_resistor.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/semic_resistor.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/semic_resistor.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/thermal_resistor.cir ${CMAKE_CURRENT_BINARY_DIR}/thermal_resistor.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/thermal_resistor.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/thermal_resistor.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/thermal_resistor.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/copper.linear ${CMAKE_CURRENT_BINARY_DIR}/copper.linear ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/copper.constant ${CMAKE_CURRENT_BINARY_DIR}/copper.constant ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/ErrorMessageTest.cir ${CMAKE_CURRENT_BINARY_DIR}/ErrorMessageTest.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/ErrorMessageTest.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/ErrorMessageTest.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/ErrorMessageTest.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/ErrorMessageTest.cir.tags ${CMAKE_CURRENT_BINARY_DIR}/ErrorMessageTest.cir.tags ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/ErrorMessageTest.cir.options ${CMAKE_CURRENT_BINARY_DIR}/ErrorMessageTest.cir.options ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/DiodeClipper.cir ${CMAKE_CURRENT_BINARY_DIR}/DiodeClipper.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/DiodeClipper.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/DiodeClipper.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/DiodeClipper.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/DiodeClipper_2par.net ${CMAKE_CURRENT_BINARY_DIR}/DiodeClipper_2par.net ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/DiodeClipper_m2.net ${CMAKE_CURRENT_BINARY_DIR}/DiodeClipper_m2.net ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/DiodeClipper_noise.cir ${CMAKE_CURRENT_BINARY_DIR}/DiodeClipper_noise.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/DiodeClipper_noise.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/DiodeClipper_noise.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/DiodeClipper_noise.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/DiodeClipper_2par_noise.net ${CMAKE_CURRENT_BINARY_DIR}/DiodeClipper_2par_noise.net ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/DiodeClipper_m2_noise.net ${CMAKE_CURRENT_BINARY_DIR}/DiodeClipper_m2_noise.net ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/diodeTranSens.cir ${CMAKE_CURRENT_BINARY_DIR}/diodeTranSens.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/diodeTranSens.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/diodeTranSens.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/diodeTranSens.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/diodeTranSens_2par.net ${CMAKE_CURRENT_BINARY_DIR}/diodeTranSens_2par.net ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/diodeTranSens_m2.net ${CMAKE_CURRENT_BINARY_DIR}/diodeTranSens_m2.net ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/dummyDiodeTranSens.net ${CMAKE_CURRENT_BINARY_DIR}/dummyDiodeTranSens.net ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/bjt_diffpair_spiceMan.cir ${CMAKE_CURRENT_BINARY_DIR}/bjt_diffpair_spiceMan.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/bjt_diffpair_spiceMan.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/bjt_diffpair_spiceMan.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/bjt_diffpair_spiceMan.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/bjt_diffpair_spiceMan.cir.tags ${CMAKE_CURRENT_BINARY_DIR}/bjt_diffpair_spiceMan.cir.tags ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/bjt_diffpair_spiceMan_m6.net ${CMAKE_CURRENT_BINARY_DIR}/bjt_diffpair_spiceMan_m6.net ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/bjt_diffpair_spiceMan_baseline.net ${CMAKE_CURRENT_BINARY_DIR}/bjt_diffpair_spiceMan_baseline.net ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/bjt_diffpair_noise.cir ${CMAKE_CURRENT_BINARY_DIR}/bjt_diffpair_noise.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/bjt_diffpair_noise.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/bjt_diffpair_noise.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/bjt_diffpair_noise.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/bjt_diffpair_noise.cir.tags ${CMAKE_CURRENT_BINARY_DIR}/bjt_diffpair_noise.cir.tags ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/bjt_diffpair_noise_m6.net ${CMAKE_CURRENT_BINARY_DIR}/bjt_diffpair_noise_m6.net ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/bjt_diffpair_noise_baseline.net ${CMAKE_CURRENT_BINARY_DIR}/bjt_diffpair_noise_baseline.net ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/lead_bjt.cir ${CMAKE_CURRENT_BINARY_DIR}/lead_bjt.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/lead_bjt.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/lead_bjt.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/lead_bjt.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/lead_bjt_baseline.net ${CMAKE_CURRENT_BINARY_DIR}/lead_bjt_baseline.net ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/lead_bjt_m6.net ${CMAKE_CURRENT_BINARY_DIR}/lead_bjt_m6.net ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/bjt_ampSens.cir ${CMAKE_CURRENT_BINARY_DIR}/bjt_ampSens.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/bjt_ampSens.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/bjt_ampSens.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/bjt_ampSens.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/bjt_ampSens_baseline.net ${CMAKE_CURRENT_BINARY_DIR}/bjt_ampSens_baseline.net ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/bjt_ampSens_m6.net ${CMAKE_CURRENT_BINARY_DIR}/bjt_ampSens_m6.net ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/gain-stage1.cir ${CMAKE_CURRENT_BINARY_DIR}/gain-stage1.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/gain-stage1.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/gain-stage1.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/gain-stage1.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/gain-stage1_baseline.net ${CMAKE_CURRENT_BINARY_DIR}/gain-stage1_baseline.net ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/gain-stage1_m6.net ${CMAKE_CURRENT_BINARY_DIR}/gain-stage1_m6.net ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/gain-stage2.cir ${CMAKE_CURRENT_BINARY_DIR}/gain-stage2.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/gain-stage2.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/gain-stage2.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/gain-stage2.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/gain-stage2_baseline.net ${CMAKE_CURRENT_BINARY_DIR}/gain-stage2_baseline.net ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/gain-stage2_m6.net ${CMAKE_CURRENT_BINARY_DIR}/gain-stage2_m6.net ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/gain-stage3.cir ${CMAKE_CURRENT_BINARY_DIR}/gain-stage3.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/gain-stage3.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/gain-stage3.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/gain-stage3.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/gain-stage3_baseline.net ${CMAKE_CURRENT_BINARY_DIR}/gain-stage3_baseline.net ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/gain-stage3_m6.net ${CMAKE_CURRENT_BINARY_DIR}/gain-stage3_m6.net ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/gain-stage_b3.cir ${CMAKE_CURRENT_BINARY_DIR}/gain-stage_b3.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/gain-stage_b3.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/gain-stage_b3.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/gain-stage_b3.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/gain-stage_b3_baseline.net ${CMAKE_CURRENT_BINARY_DIR}/gain-stage_b3_baseline.net ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/gain-stage_b3_m6.net ${CMAKE_CURRENT_BINARY_DIR}/gain-stage_b3_m6.net ONLY_IF_DIFFERENT)
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/DiodeClipper.cir.sh COMMAND perl -I${XyceRegressionTestScripts} DiodeClipper.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} DiodeClipper.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/DiodeClipper.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/DiodeClipper.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/DiodeClipper.cir.sh COMMAND perl -I${XyceRegressionTestScripts} DiodeClipper.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} DiodeClipper.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/DiodeClipper.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/DiodeClipper.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/DiodeClipper_noise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} DiodeClipper_noise.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} DiodeClipper_noise.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/DiodeClipper_noise.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/DiodeClipper_noise.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/DiodeClipper_noise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} DiodeClipper_noise.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} DiodeClipper_noise.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/DiodeClipper_noise.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/DiodeClipper_noise.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/ErrorMessageTest.cir.sh COMMAND perl -I${XyceRegressionTestScripts} ErrorMessageTest.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} ErrorMessageTest.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/ErrorMessageTest.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/ErrorMessageTest.cir.sh PROPERTY LABELS "serial;parallel;nightly;parmult;errorexit;bug834;multiplicity")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/ErrorMessageTest.cir.sh COMMAND perl -I${XyceRegressionTestScripts} ErrorMessageTest.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} ErrorMessageTest.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/ErrorMessageTest.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/ErrorMessageTest.cir.sh PROPERTY LABELS "serial;parallel;nightly;parmult;errorexit;bug834;multiplicity")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND BASH_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/bjt_ampSens.cir.sh COMMAND bash bjt_ampSens.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} bjt_ampSens.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/bjt_ampSens.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/bjt_ampSens.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( Xyce_PARALLEL_MPI  AND BASH_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/bjt_ampSens.cir.sh COMMAND bash bjt_ampSens.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} bjt_ampSens.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/bjt_ampSens.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/bjt_ampSens.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/bjt_diffpair_noise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} bjt_diffpair_noise.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} bjt_diffpair_noise.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/bjt_diffpair_noise.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/bjt_diffpair_noise.cir.sh PROPERTY LABELS "serial;parallel;nightly;bjtlev1;noise;multiplicity;bug834")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/bjt_diffpair_noise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} bjt_diffpair_noise.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} bjt_diffpair_noise.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/bjt_diffpair_noise.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/bjt_diffpair_noise.cir.sh PROPERTY LABELS "serial;parallel;nightly;bjtlev1;noise;multiplicity;bug834")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/bjt_diffpair_spiceMan.cir.sh COMMAND perl -I${XyceRegressionTestScripts} bjt_diffpair_spiceMan.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} bjt_diffpair_spiceMan.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/bjt_diffpair_spiceMan.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/bjt_diffpair_spiceMan.cir.sh PROPERTY LABELS "serial;parallel;nightly;bjtlev1;multiplicity;bug834")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/bjt_diffpair_spiceMan.cir.sh COMMAND perl -I${XyceRegressionTestScripts} bjt_diffpair_spiceMan.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} bjt_diffpair_spiceMan.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/bjt_diffpair_spiceMan.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/bjt_diffpair_spiceMan.cir.sh PROPERTY LABELS "serial;parallel;nightly;bjtlev1;multiplicity;bug834")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/capacitor.cir.sh COMMAND perl -I${XyceRegressionTestScripts} capacitor.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} capacitor.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/capacitor.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/capacitor.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/capacitor.cir.sh COMMAND perl -I${XyceRegressionTestScripts} capacitor.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} capacitor.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/capacitor.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/capacitor.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( (NOT Xyce_PARALLEL_MPI) )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/capacitor_ic.cir COMMAND $<TARGET_FILE:Xyce> capacitor_ic.cir )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/capacitor_ic.cir PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
  set_tests_properties(${TestNamePrefix}MULTIPLICITY_FACTOR/capacitor_ic.cir PROPERTIES FIXTURES_SETUP capacitor_ic.cir)
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/capacitor_ic.cir.verify COMMAND ${XYCE_VERIFY} capacitor_ic.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/capacitor_ic.cir.prn capacitor_ic.cir.prn )
  set_tests_properties(${TestNamePrefix}MULTIPLICITY_FACTOR/capacitor_ic.cir.verify PROPERTIES FIXTURES_REQUIRED capacitor_ic.cir)
endif()
if( Xyce_PARALLEL_MPI  )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/capacitor_ic.cir COMMAND mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce> capacitor_ic.cir )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/capacitor_ic.cir PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
  set_tests_properties(${TestNamePrefix}MULTIPLICITY_FACTOR/capacitor_ic.cir PROPERTIES FIXTURES_SETUP capacitor_ic.cir)
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/capacitor_ic.cir.verify COMMAND ${XYCE_VERIFY} capacitor_ic.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/capacitor_ic.cir.prn capacitor_ic.cir.prn )
  set_tests_properties(${TestNamePrefix}MULTIPLICITY_FACTOR/capacitor_ic.cir.verify PROPERTIES FIXTURES_REQUIRED capacitor_ic.cir)
endif()
if( (NOT Xyce_PARALLEL_MPI) AND BASH_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/diodeTranSens.cir.sh COMMAND bash diodeTranSens.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} diodeTranSens.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/diodeTranSens.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/diodeTranSens.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( Xyce_PARALLEL_MPI  AND BASH_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/diodeTranSens.cir.sh COMMAND bash diodeTranSens.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} diodeTranSens.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/diodeTranSens.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/diodeTranSens.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/gain-stage1.cir.sh COMMAND perl -I${XyceRegressionTestScripts} gain-stage1.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} gain-stage1.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/gain-stage1.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/gain-stage1.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/gain-stage1.cir.sh COMMAND perl -I${XyceRegressionTestScripts} gain-stage1.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} gain-stage1.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/gain-stage1.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/gain-stage1.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/gain-stage2.cir.sh COMMAND perl -I${XyceRegressionTestScripts} gain-stage2.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} gain-stage2.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/gain-stage2.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/gain-stage2.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/gain-stage2.cir.sh COMMAND perl -I${XyceRegressionTestScripts} gain-stage2.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} gain-stage2.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/gain-stage2.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/gain-stage2.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/gain-stage3.cir.sh COMMAND perl -I${XyceRegressionTestScripts} gain-stage3.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} gain-stage3.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/gain-stage3.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/gain-stage3.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/gain-stage3.cir.sh COMMAND perl -I${XyceRegressionTestScripts} gain-stage3.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} gain-stage3.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/gain-stage3.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/gain-stage3.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/gain-stage_b3.cir.sh COMMAND perl -I${XyceRegressionTestScripts} gain-stage_b3.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} gain-stage_b3.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/gain-stage_b3.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/gain-stage_b3.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/gain-stage_b3.cir.sh COMMAND perl -I${XyceRegressionTestScripts} gain-stage_b3.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} gain-stage_b3.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/gain-stage_b3.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/gain-stage_b3.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( (NOT Xyce_PARALLEL_MPI) )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/inductor.cir COMMAND $<TARGET_FILE:Xyce> inductor.cir )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/inductor.cir PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
  set_tests_properties(${TestNamePrefix}MULTIPLICITY_FACTOR/inductor.cir PROPERTIES FIXTURES_SETUP inductor.cir)
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/inductor.cir.verify COMMAND ${XYCE_VERIFY} inductor.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/inductor.cir.prn inductor.cir.prn )
  set_tests_properties(${TestNamePrefix}MULTIPLICITY_FACTOR/inductor.cir.verify PROPERTIES FIXTURES_REQUIRED inductor.cir)
endif()
if( Xyce_PARALLEL_MPI  )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/inductor.cir COMMAND mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce> inductor.cir )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/inductor.cir PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
  set_tests_properties(${TestNamePrefix}MULTIPLICITY_FACTOR/inductor.cir PROPERTIES FIXTURES_SETUP inductor.cir)
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/inductor.cir.verify COMMAND ${XYCE_VERIFY} inductor.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/inductor.cir.prn inductor.cir.prn )
  set_tests_properties(${TestNamePrefix}MULTIPLICITY_FACTOR/inductor.cir.verify PROPERTIES FIXTURES_REQUIRED inductor.cir)
endif()
if( (NOT Xyce_PARALLEL_MPI) )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/inductor_ic.cir COMMAND $<TARGET_FILE:Xyce> inductor_ic.cir )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/inductor_ic.cir PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
  set_tests_properties(${TestNamePrefix}MULTIPLICITY_FACTOR/inductor_ic.cir PROPERTIES FIXTURES_SETUP inductor_ic.cir)
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/inductor_ic.cir.verify COMMAND ${XYCE_VERIFY} inductor_ic.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/inductor_ic.cir.prn inductor_ic.cir.prn )
  set_tests_properties(${TestNamePrefix}MULTIPLICITY_FACTOR/inductor_ic.cir.verify PROPERTIES FIXTURES_REQUIRED inductor_ic.cir)
endif()
if( Xyce_PARALLEL_MPI  )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/inductor_ic.cir COMMAND mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce> inductor_ic.cir )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/inductor_ic.cir PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
  set_tests_properties(${TestNamePrefix}MULTIPLICITY_FACTOR/inductor_ic.cir PROPERTIES FIXTURES_SETUP inductor_ic.cir)
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/inductor_ic.cir.verify COMMAND ${XYCE_VERIFY} inductor_ic.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/inductor_ic.cir.prn inductor_ic.cir.prn )
  set_tests_properties(${TestNamePrefix}MULTIPLICITY_FACTOR/inductor_ic.cir.verify PROPERTIES FIXTURES_REQUIRED inductor_ic.cir)
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/lead_bjt.cir.sh COMMAND perl -I${XyceRegressionTestScripts} lead_bjt.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} lead_bjt.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/lead_bjt.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/lead_bjt.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/lead_bjt.cir.sh COMMAND perl -I${XyceRegressionTestScripts} lead_bjt.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} lead_bjt.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/lead_bjt.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/lead_bjt.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/resistor.cir.sh COMMAND perl -I${XyceRegressionTestScripts} resistor.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} resistor.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/resistor.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/resistor.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/resistor.cir.sh COMMAND perl -I${XyceRegressionTestScripts} resistor.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} resistor.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/resistor.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/resistor.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/semic_capacitor.cir.sh COMMAND perl -I${XyceRegressionTestScripts} semic_capacitor.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} semic_capacitor.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/semic_capacitor.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/semic_capacitor.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/semic_capacitor.cir.sh COMMAND perl -I${XyceRegressionTestScripts} semic_capacitor.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} semic_capacitor.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/semic_capacitor.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/semic_capacitor.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/semic_resistor.cir.sh COMMAND perl -I${XyceRegressionTestScripts} semic_resistor.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} semic_resistor.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/semic_resistor.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/semic_resistor.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/semic_resistor.cir.sh COMMAND perl -I${XyceRegressionTestScripts} semic_resistor.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} semic_resistor.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/semic_resistor.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/semic_resistor.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/soln_dep_capacitor.cir.sh COMMAND perl -I${XyceRegressionTestScripts} soln_dep_capacitor.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} soln_dep_capacitor.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/soln_dep_capacitor.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/soln_dep_capacitor.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/soln_dep_capacitor.cir.sh COMMAND perl -I${XyceRegressionTestScripts} soln_dep_capacitor.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} soln_dep_capacitor.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/soln_dep_capacitor.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/soln_dep_capacitor.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/thermal_resistor.cir.sh COMMAND perl -I${XyceRegressionTestScripts} thermal_resistor.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} thermal_resistor.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/thermal_resistor.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/thermal_resistor.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834;thermalresistor")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MULTIPLICITY_FACTOR/thermal_resistor.cir.sh COMMAND perl -I${XyceRegressionTestScripts} thermal_resistor.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} thermal_resistor.cir ${OutputDataDir}/MULTIPLICITY_FACTOR/thermal_resistor.cir.prn )
  set_property(TEST ${TestNamePrefix}MULTIPLICITY_FACTOR/thermal_resistor.cir.sh PROPERTY LABELS "serial;parallel;nightly;multiplicity;bug834;thermalresistor")
endif()
