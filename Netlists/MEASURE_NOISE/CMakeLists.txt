# This file is generated by the script SetUpCtestFiles.py
# If possible, modify the script to fix any issues with the CMakeLists.txt files
# Or you can remove this header line to prevent this file from being overwritten

file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/AvgTestNoise.cir ${CMAKE_CURRENT_BINARY_DIR}/AvgTestNoise.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/AvgTestNoise.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/AvgTestNoise.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/AvgTestNoise.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/AvgTestNoiseGSfile ${CMAKE_CURRENT_BINARY_DIR}/AvgTestNoiseGSfile ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/DerivTestNoise.cir ${CMAKE_CURRENT_BINARY_DIR}/DerivTestNoise.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/DerivTestNoise.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/DerivTestNoise.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/DerivTestNoise.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/DerivTestNoiseGSfile ${CMAKE_CURRENT_BINARY_DIR}/DerivTestNoiseGSfile ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/EquationEvalTestNoise.cir ${CMAKE_CURRENT_BINARY_DIR}/EquationEvalTestNoise.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/EquationEvalTestNoise.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/EquationEvalTestNoise.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/EquationEvalTestNoise.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/EquationEvalTestNoiseGSfile ${CMAKE_CURRENT_BINARY_DIR}/EquationEvalTestNoiseGSfile ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/ErrorFuncTestNoise.cir ${CMAKE_CURRENT_BINARY_DIR}/ErrorFuncTestNoise.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/ErrorFuncTestNoise.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/ErrorFuncTestNoise.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/ErrorFuncTestNoise.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/ErrorFuncTestNoiseGSfile ${CMAKE_CURRENT_BINARY_DIR}/ErrorFuncTestNoiseGSfile ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/ErrorTestNoise.cir ${CMAKE_CURRENT_BINARY_DIR}/ErrorTestNoise.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/ErrorTestNoise.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/ErrorTestNoise.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/ErrorTestNoise.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/ErrorTestNoiseGSfile ${CMAKE_CURRENT_BINARY_DIR}/ErrorTestNoiseGSfile ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/ErrorTestNoiseRawData.NOISE.prn ${CMAKE_CURRENT_BINARY_DIR}/ErrorTestNoiseRawData.NOISE.prn ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/FindWhenTestNoise.cir ${CMAKE_CURRENT_BINARY_DIR}/FindWhenTestNoise.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/FindWhenTestNoise.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/FindWhenTestNoise.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/FindWhenTestNoise.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/FindWhenTestNoiseGSfile ${CMAKE_CURRENT_BINARY_DIR}/FindWhenTestNoiseGSfile ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/IntegTestNoise.cir ${CMAKE_CURRENT_BINARY_DIR}/IntegTestNoise.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/IntegTestNoise.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/IntegTestNoise.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/IntegTestNoise.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/IntegTestNoiseGSfile ${CMAKE_CURRENT_BINARY_DIR}/IntegTestNoiseGSfile ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/MaxMinPPTestNoise.cir ${CMAKE_CURRENT_BINARY_DIR}/MaxMinPPTestNoise.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/MaxMinPPTestNoise.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/MaxMinPPTestNoise.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/MaxMinPPTestNoise.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/MaxMinPPTestNoiseGSfile ${CMAKE_CURRENT_BINARY_DIR}/MaxMinPPTestNoiseGSfile ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/InputNoiseOps.cir ${CMAKE_CURRENT_BINARY_DIR}/InputNoiseOps.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/InputNoiseOps.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/InputNoiseOps.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/InputNoiseOps.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/InputNoiseOpsGSfile ${CMAKE_CURRENT_BINARY_DIR}/InputNoiseOpsGSfile ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/InputNoiseOpsRawData.NOISE.prn ${CMAKE_CURRENT_BINARY_DIR}/InputNoiseOpsRawData.NOISE.prn ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/OutputNoiseOps.cir ${CMAKE_CURRENT_BINARY_DIR}/OutputNoiseOps.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/OutputNoiseOps.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/OutputNoiseOps.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/OutputNoiseOps.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/OutputNoiseOpsGSfile ${CMAKE_CURRENT_BINARY_DIR}/OutputNoiseOpsGSfile ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/OutputNoiseOpsRawData.NOISE.prn ${CMAKE_CURRENT_BINARY_DIR}/OutputNoiseOpsRawData.NOISE.prn ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/RMSTestNoise.cir ${CMAKE_CURRENT_BINARY_DIR}/RMSTestNoise.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/RMSTestNoise.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/RMSTestNoise.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/RMSTestNoise.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/RMSTestNoiseGSfile ${CMAKE_CURRENT_BINARY_DIR}/RMSTestNoiseGSfile ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/TrigTargTestNoise.cir ${CMAKE_CURRENT_BINARY_DIR}/TrigTargTestNoise.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/TrigTargTestNoise.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/TrigTargTestNoise.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/TrigTargTestNoise.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/TrigTargTestNoiseGSfile ${CMAKE_CURRENT_BINARY_DIR}/TrigTargTestNoiseGSfile ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/DotOpNoNoise.cir ${CMAKE_CURRENT_BINARY_DIR}/DotOpNoNoise.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/DotOpNoNoise.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/DotOpNoNoise.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/DotOpNoNoise.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/DotOpNoNoise.cir.tags ${CMAKE_CURRENT_BINARY_DIR}/DotOpNoNoise.cir.tags ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/DotOpNoNoise.cir.options ${CMAKE_CURRENT_BINARY_DIR}/DotOpNoNoise.cir.options ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/oneSweepValue.cir ${CMAKE_CURRENT_BINARY_DIR}/oneSweepValue.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/oneSweepValue.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/oneSweepValue.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/oneSweepValue.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/oneSweepValueGSfile ${CMAKE_CURRENT_BINARY_DIR}/oneSweepValueGSfile ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/measure_noise_analysis_mismatch.cir ${CMAKE_CURRENT_BINARY_DIR}/measure_noise_analysis_mismatch.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/measure_noise_analysis_mismatch.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/measure_noise_analysis_mismatch.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/measure_noise_analysis_mismatch.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/measure_noise_analysis_mismatch.cir.tags ${CMAKE_CURRENT_BINARY_DIR}/measure_noise_analysis_mismatch.cir.tags ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/measure_noise_analysis_mismatch.cir.options ${CMAKE_CURRENT_BINARY_DIR}/measure_noise_analysis_mismatch.cir.options ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/unsupported_noise_measure_types.cir ${CMAKE_CURRENT_BINARY_DIR}/unsupported_noise_measure_types.cir ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/unsupported_noise_measure_types.cir.sh ${CMAKE_CURRENT_BINARY_DIR}/unsupported_noise_measure_types.cir.sh ONLY_IF_DIFFERENT)
file(CHMOD ${CMAKE_CURRENT_BINARY_DIR}/unsupported_noise_measure_types.cir.sh PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/unsupported_noise_measure_types.cir.tags ${CMAKE_CURRENT_BINARY_DIR}/unsupported_noise_measure_types.cir.tags ONLY_IF_DIFFERENT)
file(COPY_FILE ${CMAKE_CURRENT_SOURCE_DIR}/unsupported_noise_measure_types.cir.options ${CMAKE_CURRENT_BINARY_DIR}/unsupported_noise_measure_types.cir.options ONLY_IF_DIFFERENT)
if( (NOT Xyce_PARALLEL_MPI) AND Xyce_USE_FFT AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/AvgTestNoise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} AvgTestNoise.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} AvgTestNoise.cir ${OutputDataDir}/MEASURE_NOISE/AvgTestNoise.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/AvgTestNoise.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise;required:fft;valgrind")
endif()
if( Xyce_PARALLEL_MPI  AND Xyce_USE_FFT AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/AvgTestNoise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} AvgTestNoise.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} AvgTestNoise.cir ${OutputDataDir}/MEASURE_NOISE/AvgTestNoise.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/AvgTestNoise.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise;required:fft;valgrind")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/DerivTestNoise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} DerivTestNoise.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} DerivTestNoise.cir ${OutputDataDir}/MEASURE_NOISE/DerivTestNoise.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/DerivTestNoise.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise;valgrind")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/DerivTestNoise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} DerivTestNoise.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} DerivTestNoise.cir ${OutputDataDir}/MEASURE_NOISE/DerivTestNoise.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/DerivTestNoise.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise;valgrind")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/DotOpNoNoise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} DotOpNoNoise.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} DotOpNoNoise.cir ${OutputDataDir}/MEASURE_NOISE/DotOpNoNoise.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/DotOpNoNoise.cir.sh PROPERTY LABELS "nightly;serial;parallel;noise;measure;errorexit")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/DotOpNoNoise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} DotOpNoNoise.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} DotOpNoNoise.cir ${OutputDataDir}/MEASURE_NOISE/DotOpNoNoise.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/DotOpNoNoise.cir.sh PROPERTY LABELS "nightly;serial;parallel;noise;measure;errorexit")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/EquationEvalTestNoise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} EquationEvalTestNoise.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} EquationEvalTestNoise.cir ${OutputDataDir}/MEASURE_NOISE/EquationEvalTestNoise.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/EquationEvalTestNoise.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise;valgrind")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/EquationEvalTestNoise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} EquationEvalTestNoise.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} EquationEvalTestNoise.cir ${OutputDataDir}/MEASURE_NOISE/EquationEvalTestNoise.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/EquationEvalTestNoise.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise;valgrind")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/ErrorFuncTestNoise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} ErrorFuncTestNoise.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} ErrorFuncTestNoise.cir ${OutputDataDir}/MEASURE_NOISE/ErrorFuncTestNoise.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/ErrorFuncTestNoise.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise;valgrind")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/ErrorFuncTestNoise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} ErrorFuncTestNoise.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} ErrorFuncTestNoise.cir ${OutputDataDir}/MEASURE_NOISE/ErrorFuncTestNoise.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/ErrorFuncTestNoise.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise;valgrind")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/ErrorTestNoise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} ErrorTestNoise.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} ErrorTestNoise.cir ${OutputDataDir}/MEASURE_NOISE/ErrorTestNoise.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/ErrorTestNoise.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/ErrorTestNoise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} ErrorTestNoise.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} ErrorTestNoise.cir ${OutputDataDir}/MEASURE_NOISE/ErrorTestNoise.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/ErrorTestNoise.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/FindWhenTestNoise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} FindWhenTestNoise.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} FindWhenTestNoise.cir ${OutputDataDir}/MEASURE_NOISE/FindWhenTestNoise.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/FindWhenTestNoise.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise;valgrind")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/FindWhenTestNoise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} FindWhenTestNoise.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} FindWhenTestNoise.cir ${OutputDataDir}/MEASURE_NOISE/FindWhenTestNoise.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/FindWhenTestNoise.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise;valgrind")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/InputNoiseOps.cir.sh COMMAND perl -I${XyceRegressionTestScripts} InputNoiseOps.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} InputNoiseOps.cir ${OutputDataDir}/MEASURE_NOISE/InputNoiseOps.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/InputNoiseOps.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise;valgrind")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/InputNoiseOps.cir.sh COMMAND perl -I${XyceRegressionTestScripts} InputNoiseOps.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} InputNoiseOps.cir ${OutputDataDir}/MEASURE_NOISE/InputNoiseOps.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/InputNoiseOps.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise;valgrind")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/IntegTestNoise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} IntegTestNoise.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} IntegTestNoise.cir ${OutputDataDir}/MEASURE_NOISE/IntegTestNoise.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/IntegTestNoise.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise;valgrind")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/IntegTestNoise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} IntegTestNoise.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} IntegTestNoise.cir ${OutputDataDir}/MEASURE_NOISE/IntegTestNoise.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/IntegTestNoise.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise;valgrind")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/MaxMinPPTestNoise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} MaxMinPPTestNoise.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} MaxMinPPTestNoise.cir ${OutputDataDir}/MEASURE_NOISE/MaxMinPPTestNoise.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/MaxMinPPTestNoise.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise;valgrind")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/MaxMinPPTestNoise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} MaxMinPPTestNoise.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} MaxMinPPTestNoise.cir ${OutputDataDir}/MEASURE_NOISE/MaxMinPPTestNoise.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/MaxMinPPTestNoise.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise;valgrind")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/OutputNoiseOps.cir.sh COMMAND perl -I${XyceRegressionTestScripts} OutputNoiseOps.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} OutputNoiseOps.cir ${OutputDataDir}/MEASURE_NOISE/OutputNoiseOps.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/OutputNoiseOps.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise;valgrind")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/OutputNoiseOps.cir.sh COMMAND perl -I${XyceRegressionTestScripts} OutputNoiseOps.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} OutputNoiseOps.cir ${OutputDataDir}/MEASURE_NOISE/OutputNoiseOps.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/OutputNoiseOps.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise;valgrind")
endif()
add_subdirectory(REMEASURE)
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/RMSTestNoise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} RMSTestNoise.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} RMSTestNoise.cir ${OutputDataDir}/MEASURE_NOISE/RMSTestNoise.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/RMSTestNoise.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise;valgrind")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/RMSTestNoise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} RMSTestNoise.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} RMSTestNoise.cir ${OutputDataDir}/MEASURE_NOISE/RMSTestNoise.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/RMSTestNoise.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise;valgrind")
endif()
add_subdirectory(STEP)
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/TrigTargTestNoise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} TrigTargTestNoise.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} TrigTargTestNoise.cir ${OutputDataDir}/MEASURE_NOISE/TrigTargTestNoise.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/TrigTargTestNoise.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise;valgrind")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/TrigTargTestNoise.cir.sh COMMAND perl -I${XyceRegressionTestScripts} TrigTargTestNoise.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} TrigTargTestNoise.cir ${OutputDataDir}/MEASURE_NOISE/TrigTargTestNoise.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/TrigTargTestNoise.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise;valgrind")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/measure_noise_analysis_mismatch.cir.sh COMMAND perl -I${XyceRegressionTestScripts} measure_noise_analysis_mismatch.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} measure_noise_analysis_mismatch.cir ${OutputDataDir}/MEASURE_NOISE/measure_noise_analysis_mismatch.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/measure_noise_analysis_mismatch.cir.sh PROPERTY LABELS "nightly;serial;parallel;noise;measure;errorexit")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/measure_noise_analysis_mismatch.cir.sh COMMAND perl -I${XyceRegressionTestScripts} measure_noise_analysis_mismatch.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} measure_noise_analysis_mismatch.cir ${OutputDataDir}/MEASURE_NOISE/measure_noise_analysis_mismatch.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/measure_noise_analysis_mismatch.cir.sh PROPERTY LABELS "nightly;serial;parallel;noise;measure;errorexit")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/oneSweepValue.cir.sh COMMAND perl -I${XyceRegressionTestScripts} oneSweepValue.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} oneSweepValue.cir ${OutputDataDir}/MEASURE_NOISE/oneSweepValue.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/oneSweepValue.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/oneSweepValue.cir.sh COMMAND perl -I${XyceRegressionTestScripts} oneSweepValue.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} oneSweepValue.cir ${OutputDataDir}/MEASURE_NOISE/oneSweepValue.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/oneSweepValue.cir.sh PROPERTY LABELS "nightly;serial;parallel;measure;noise")
endif()
if( (NOT Xyce_PARALLEL_MPI) AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/unsupported_noise_measure_types.cir.sh COMMAND perl -I${XyceRegressionTestScripts} unsupported_noise_measure_types.cir.sh $<TARGET_FILE:Xyce> ${XYCE_VERIFY} ${XYCE_VERIFY} unsupported_noise_measure_types.cir ${OutputDataDir}/MEASURE_NOISE/unsupported_noise_measure_types.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/unsupported_noise_measure_types.cir.sh PROPERTY LABELS "nightly;serial;parallel;noise;measure;errorexit")
endif()
if( Xyce_PARALLEL_MPI  AND PERL_FOUND )
  add_test(NAME ${TestNamePrefix}MEASURE_NOISE/unsupported_noise_measure_types.cir.sh COMMAND perl -I${XyceRegressionTestScripts} unsupported_noise_measure_types.cir.sh "mpiexec -bind-to none -np 2 $<TARGET_FILE:Xyce>" ${XYCE_VERIFY} ${XYCE_VERIFY} unsupported_noise_measure_types.cir ${OutputDataDir}/MEASURE_NOISE/unsupported_noise_measure_types.cir.prn )
  set_property(TEST ${TestNamePrefix}MEASURE_NOISE/unsupported_noise_measure_types.cir.sh PROPERTY LABELS "nightly;serial;parallel;noise;measure;errorexit")
endif()
