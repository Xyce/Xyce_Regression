*Test various cases of the ternary operator and compare to what should be
*the equivalent IF function call.
* This test simply creates equivalent pairs of circuits and prints out
* the differences between their voltages, which should all be zero, and
* this will be enforced by a "gold standard generating script" that
* creates the all-zero gold standard.
*
* It was important in developing this test to make sure that the expressions
* chosen aren't trivially zero, in which case the test would be worthless.
*
VS 1 0 -2.5
RS 1 0 1.0

* Test simple conditional
B1 2 0 V={V(1)>0?2*V(1):0}
R1 2 0 1.0
B1a 2a 0 V={if(V(1)>0,2*V(1),0)}
R1a 2a 0 1.0

* Test precedence with addition
B2 3 0 V={1+V(1)>0?2*V(1):0+2}
R2 3 0 1.0
B2a 3a 0 V={if(1+V(1)>0,2*V(1),2)}
R2a 3a 0 1.0
*Same thing, but with parens around boolean expression
B3 4 0 V={1+(V(1)>0)?2*V(1):0+2}
R3 4 0 1.0
B3a 4a 0 V={if(1+(V(1)>0),2*V(1),2)}
R3a 4a 0 1.0
* Now put parens around ternary expression
B4 5 0 V={1+((V(1)>0)?2*V(1):0)+2}
R4 5 0 1.0
B4a 5a 0 V={1+if((V(1)>0),2*V(1),0)+2}
R4a 5a 0 1.0

* Now repeat all that with subtraction
B2s 3s 0 V={1-V(1)>0?2*V(1):0-2}
R2s 3s 0 1.0
B2sa 3sa 0 V={if(1-V(1)>0,2*V(1),-2)}
R2sa 3sa 0 1.0
*Same thing, but with parens around boolean expression
B3s 4s 0 V={1-(V(1)>0)?2*V(1):0-2}
R3s 4s 0 1.0
B3sa 4sa 0 V={if(1-(V(1)>0),2*V(1),-2)}
R3sa 4sa 0 1.0
* Now put parens around ternary expression
B4s 5s 0 V={1-((V(1)>0)?2*V(1):0)-2}
R4s 5s 0 1.0
B4sa 5sa 0 V={1-if((V(1)>0),2*V(1),0)-2}
R4sa 5sa 0 1.0

* Now repeat all that with multiplication
B2m 3m 0 V={2*V(1)>0?2*V(1):1*2}
R2m 3m 0 1.0
B2ma 3ma 0 V={if(2*V(1)>0,2*V(1),2)}
R2ma 3ma 0 1.0
*Same thing, but with parens around boolean expression
B3m 4m 0 V={2*(V(1)>0)?2*V(1):1*2}
R3m 4m 0 1.0
B3ma 4ma 0 V={if(2*(V(1)>0),2*V(1),2)}
R3ma 4ma 0 1.0
* Now put parens around ternary expression
B4m 5m 0 V={2*((V(1)>0)?2*V(1):0)*2}
R4m 5m 0 1.0
B4ma 5ma 0 V={2*if((V(1)>0),2*V(1),0)*2}
R4ma 5ma 0 1.0

* Now repeat all that with division (modified to make sure we never divide by
* zero, of course)
B2d 3d 0 V={2/(V(1)+3)>.5?2*V(1):1/2}
R2d 3d 0 1.0
B2da 3da 0 V={if(2/(V(1)+3)>.5,2*V(1),1/2)}
R2da 3da 0 1.0
*Can't do same thing, but with parens around boolean expression, because
* that would lead to division by zero
* Now put parens around ternary expression
B4d 5d 0 V={2/((V(1)>0)?2*V(1):1)/2}
R4d 5d 0 1.0
B4da 5da 0 V={2/if((V(1)>0),2*V(1),1)/2}
R4da 5da 0 1.0

* Tests of nested ternary operators
* Test simple conditional
B1n 2n 0 V={V(1)>0?2*V(1)<5?1:2:0}
R1n 2n 0 1.0
B1na 2na 0 V={if(V(1)>0,IF(2*V(1)<5,1,2),0)}
R1na 2na 0 1.0

* Now test using some params
.param foobie=1
.param bletch=2
* NOTE: due to parsing problems, it is never possible to use "foobie"
* directly followed by a colon here!  Must disambiguate with "foobie:bletch"
* which is a legal (but nonexistent) identifier of its own right (meaning
* the "bletch" parameter of the device "foobie").
B1p 2p 0 V={V(1)>0?(foobie):bletch}
R1p 2p 0 1.0
B1pa 2pa 0 V={if(V(1)>0,foobie,bletch)}
R1pa 2pa 0 1.0
*This is also acceptable, because foobie is not touching the colon
B1pb 2pb 0 V={V(1)>0?foobie+0:bletch}
R1pb 2pb 0 1.0


.DC VS -2.5 2.5 0.1
.PRINT DC V(1) {V(2)-V(2a)} {V(3)-V(3a)} {V(4)-V(4a)} {V(5)-V(5a)}
+  {V(3s)-V(3sa)} {V(4s)-V(4sa)} {V(5s)-V(5sa)}
+  {V(3m)-V(3ma)} {V(4m)-V(4ma)} {V(5m)-V(5ma)}
+  {V(3d)-V(3da)} {V(5d)-V(5da)}
+  {V(2n)-V(2na)}
+  {V(2p)-V(2pa)} {V(2pb)-V(2pa)}
.END
