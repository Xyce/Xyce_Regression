#!/usr/bin/env perl

# The input arguments to this script are:
# $ARGV[0] = location of Xyce binary
# $ARGV[1] = location of xyce_verify.pl script
# $ARGV[2] = location of compare script  (This is NEVER used and can be ignored)
# $ARGV[3] = location of circuit file to test
# $ARGV[4] = location of gold standard prn file

# This test case runs a simple biased transistor and computes the
# sensitivities with respect to a few model variables.
#
# A second netlist, in which the sensitivities are generated by finite
# differencing between perturbed copies of the circuit, is also run.  The
# analytic sensitivities from the first netlist are compared to the
# sensitivities from the second.

$XYCE=$ARGV[0];
$XYCE_VERIFY=$ARGV[1];
$CIRFILE=$ARGV[3]; 

$CIR1 = $CIRFILE;

`rm -f $CIR1*prn* $CIR1*.out $CIR1.err $CIR1.prn.err `;
$CMD="$XYCE $CIR1 > $CIR1.out 2> $CIR1.err";
if (system($CMD) != 0)
{
    print "Xyce EXITED WITH ERROR! on $CIR1\n";
    $xyceexit=1;
}
else
{
    if (-z "$CIR1.err" ) {`rm -f $CIR1.err`;}
}

if (defined ($xyceexit)) {print "Exit code = 10\n"; exit 10;}

# check the timing of CIR1
$runtimePassed=1;
$CIR1runtime=`grep -m 1 'Total Simulation Solvers Run Time:' $CIR1.out`;
chomp($CIR1runtime);
$CIR1runtime=~ s/\*\*\*\*\* Total Simulation Solvers Run Time: ([0-9]*)/\1/;
$CIR1runtime=~ s/ ([0-9]*)seconds/\1/;
print STDERR  "$CIR1 runtime is $CIR1runtime\n";

if ($CIR1runtime > 10) # this is VERY slow, but before the bugfix this circuit was even slower
{
  print STDERR "$CIR1 runtime failed  :  $CIR1runtime > 10\n";
  $runtimePassed=0;
}
else
{
  print STDERR "$CIR1 runtime passed  :  $CIR1runtime <= 10\n";
}

if ($runtimePassed==1)
{
    print "Exit code = 0\n";
    exit 0;
}
else
{
    print "Exit code = 2\n";
    exit 2;
}


