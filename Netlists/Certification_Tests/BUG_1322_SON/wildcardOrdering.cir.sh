#!/usr/bin/env perl
# The input arguments to this script are:
# $ARGV[0] = location of Xyce binary
# $ARGV[1] = location of xyce_verify.pl script
# $ARGV[2] = location of compare script
# $ARGV[3] = location of circuit file to test
# $ARGV[4] = location of gold standard prn file

use XyceRegression::Tools;

$Tools = XyceRegression::Tools->new();

$XYCE=$ARGV[0];
$XYCE_VERIFY=$ARGV[1];
$CIRFILE=$ARGV[3];
$PRNOUT=$CIRFILE.".prn";
$PRNOUT1=$CIRFILE.".prn1";

# remove old output files
system("rm -f $CIRFILE\_faked*");

# This is the list of fields that must be in the output.
# Use of unordered maps in Xyce means they might not come out in the
# same order on different platforms.
@expectedOutputs=("Index", "TIME", "V\\(1\\)", "V\\(2\\)", "I\\(V1\\)", "I\\(V2\\)", "I\\(R1\\)", "I\\(R2\\)");

# Now run the main netlist, which has the V() and I() wildcard print lines in it.
$retval = -1;
$retval=$Tools->wrapXyce($XYCE,$CIRFILE);
if ($retval != 0) { print "Exit code = $retval\n"; exit $retval; }
if ( (not -s "$PRNOUT" ) || (not -s "$PRNOUT1" ) )
{ 
  print "Missing output file $PRNOUT or $PRNOUT1\n";
  print "Exit code = 14\n"; exit 14;
}

# pull the header lines out of the files and check them for the presence of all
# required data:
open(PRNFILE,"<$PRNOUT");
$headerline=<PRNFILE>;
close(PRNFILE);

chomp($headerline);
@headerfields=split(' ',$headerline);

$retval=0;
$numMatch=0;
foreach $field (@expectedOutputs)
{
    if ( $headerline =~ /$field/ )
    {
        ++$numMatch;
    }
    else
    {
        print STDERR "Could not find field $field in primary output file.\n";
        $retval=2;
    }
}

if ($#headerfields+1 != $#expectedOutputs+1)
{
    print STDERR "Incorrect number of entries on header line in primary output file.\n";
    $retval=2;
}
elsif ($numMatch != ($#expectedOutputs + 1))
{
    print STDERR "Insufficient number of matches found on header line in primary output file.\n";
    $retval=2;
}

# Now check the header line generated by the .PRINT line with I(*) V(*) on it
open(PRNFILE1,"<$PRNOUT1");
$headerline=<PRNFILE1>;
close(PRNFILE1);

chomp($headerline);
@headerfields1=split(' ',$headerline);

$numMatch=0;
foreach $field (@expectedOutputs)
{
    if ( $headerline =~ /$field/ )
    {
        ++$numMatch;
    }
    else
    {
        print STDERR "Could not find field $field in secondary output file.\n";
        $retval=2;
    }
}

if ($#headerfields1+1 != $#expectedOutputs+1)
{
    print STDERR "Incorrect number of entries on header line in secondary output file.\n";
    $retval=2;
}
elsif ($numMatch != ($#expectedOutputs + 1))
{
    print STDERR "Insufficient number of matches found on header line in secondary output file.\n";
    $retval=2;
}

# check the I vs. V ordering in both header lines
$iFound=0;
foreach $field (@headerfields)
{
  if (($field ne "Index") && (substr( $field,0,1) eq "I")) {$iFound=1;}
  if ( (substr($field,0,1) eq "V") && ($iFound == 1))
  {
    print STDERR "V(*) I(*) ordering incorrect in primary output file\n";
    $retval=2; last;
  }     
}

$vFound=0;
foreach $field (@headerfields1)
{
  if (substr( $field,0,1) eq "V") {$vFound=1;}
  if ( (substr( $field,0,1) eq "I") && ($vFound == 1))
  {
    print STDERR "I(*) V(*) ordering incorrect in secondary output file\n";
    $retval=2; last;
  }    
}

# only if we have all the expected outputs should we proceed.
if ($retval==0)
{
    # Get rid of Index
    shift(@headerfields);
    shift(@headerfields1);

    open(CIRFILE,"<$CIRFILE");
    $CIRFILE2=$CIRFILE."_faked";
    $CIRFILE3=$CIRFILE."_faked1";
    open(CIRFILE2,">$CIRFILE2");
    open(CIRFILE3,">$CIRFILE3");
    while(<CIRFILE>)
    {
        if (/.print/)
        {
            # captures print line with V(*) I(*)
            print CIRFILE2 ".print tran";
            foreach $field (@headerfields)
            {
                if ($field ne "TIME") {print CIRFILE2 " $field"};
            }
            print CIRFILE2 "\n";
        }
        elsif (/.PRINT/)
        {
            # captures print line with I(*) V(*)
            print CIRFILE3 ".print tran";
            foreach $field (@headerfields1)
            {
                if ($field ne "TIME") {print CIRFILE3 " $field"};
            }
            print CIRFILE3 "\n";
        }
        else
        {
            print CIRFILE2 $_;
            print CIRFILE3 $_;
        }
    }
    close(CIRFILE);
    close(CIRFILE2);
    close(CIRFILE3);

    # We have now created two new circuit files that should have .print lines that match
    # what the V(*) I(*) and I(*) V(*) wildcard versions did
    $retval=$Tools->wrapXyce($XYCE,$CIRFILE2);
    if ($retval != 0) { print "Exit code = $retval\n"; exit $retval; }
    if (not -s "$CIRFILE2.prn" ) { print "Exit code = 14\n"; exit 14; }

    $retval=$Tools->wrapXyce($XYCE,$CIRFILE3);
    if ($retval != 0) { print "Exit code = $retval\n"; exit $retval; }
    if (not -s "$CIRFILE3.prn" ) { print "Exit code = 14\n"; exit 14; }

    # Have to use the faked cirfiles here
    $CMD="diff $PRNOUT $CIRFILE2.prn";
    $retcode=system($CMD);
    $retcode = $retcode >> 8;
    if ($retcode != 0)
    {
      print STDERR "Failed diff for primary output file $PRNOUT\n";
      $retval = 2;
    }

    $CMD="diff $PRNOUT1 $CIRFILE3.prn";
    $retcode=system($CMD);
    $retcode = $retcode >> 8;
    if ($retcode != 0)
    {
      print STDERR "Failed diff for secondary output file $PRNOUT1\n";
      $retval = 2;
    }
}

print "Exit code = $retval\n";
exit $retval;
